//
//  CoachResponse.swift
//  MindLoop
//
//  Represents a generated coach response with metadata
//  Source: CLAUDE.md - CoachAgent output
//

import Foundation

/// A coach response generated by the CoachAgent
struct CoachResponse: Codable, Identifiable, Equatable {
    // MARK: - Properties

    /// Unique identifier for this response
    let id: String

    /// The generated response text (~80-120 tokens)
    let text: String

    /// Timestamp when response was generated
    let timestamp: Date

    /// IDs of journal entries cited in the response (for context cards)
    let citedEntries: [String]

    /// Suggested tiny action for the user
    let suggestedAction: String?

    /// Next CBT state the conversation should transition to
    let nextState: CBTState

    /// Model metadata (for debugging/learning loop)
    let metadata: ResponseMetadata

    // MARK: - Nested Types

    /// CBT conversation state machine
    enum CBTState: String, Codable, CaseIterable {
        case goal
        case situation
        case thoughts
        case feelings
        case distortions
        case reframe
        case action
        case reflect

        var displayName: String {
            switch self {
            case .goal: return "Goal Setting"
            case .situation: return "Situation"
            case .thoughts: return "Thoughts"
            case .feelings: return "Feelings"
            case .distortions: return "Distortions"
            case .reframe: return "Reframe"
            case .action: return "Action"
            case .reflect: return "Reflect"
            }
        }

        var promptGuide: String {
            switch self {
            case .goal: return "What would you like to work on today?"
            case .situation: return "Tell me more about the situation..."
            case .thoughts: return "What thoughts came up?"
            case .feelings: return "How did that make you feel?"
            case .distortions: return "Let's examine if there are other ways to see this..."
            case .reframe: return "What's another way to look at this?"
            case .action: return "What's one tiny step you could take?"
            case .reflect: return "How does that feel now?"
            }
        }
    }

    /// Response generation metadata
    struct ResponseMetadata: Codable, Equatable {
        /// Token count of generated response
        let tokenCount: Int

        /// Generation latency in milliseconds
        let latencyMs: Int

        /// Model used (e.g., "qwen3-4b-int4")
        let model: String

        /// LoRA adapter used, if any
        let loraAdapter: String?

        /// Retrieval context used (number of entries + card ID)
        let retrievalContext: RetrievalContext

        struct RetrievalContext: Codable, Equatable {
            let entryCount: Int
            let cardId: String?
        }
    }

    // MARK: - Initialization

    init(
        id: String = UUID().uuidString,
        text: String,
        timestamp: Date = Date(),
        citedEntries: [String] = [],
        suggestedAction: String? = nil,
        nextState: CBTState,
        metadata: ResponseMetadata
    ) {
        self.id = id
        self.text = text
        self.timestamp = timestamp
        self.citedEntries = citedEntries
        self.suggestedAction = suggestedAction
        self.nextState = nextState
        self.metadata = metadata
    }

    // MARK: - Codable

    enum CodingKeys: String, CodingKey {
        case id
        case text
        case timestamp
        case citedEntries = "cited_entries"
        case suggestedAction = "suggested_action"
        case nextState = "next_state"
        case metadata
    }

    // MARK: - Computed Properties

    /// Word count of response
    var wordCount: Int {
        text.components(separatedBy: .whitespacesAndNewlines)
            .filter { !$0.isEmpty }
            .count
    }

    /// Indicates if response has citations
    var hasCitations: Bool {
        !citedEntries.isEmpty
    }

    /// Indicates if response suggests an action
    var hasAction: Bool {
        suggestedAction != nil && !(suggestedAction?.isEmpty ?? true)
    }

    /// Formatted latency for display (e.g., "1.2s")
    var formattedLatency: String {
        let seconds = Double(metadata.latencyMs) / 1000.0
        return String(format: "%.1fs", seconds)
    }

    /// Performance indicator (green if < 2s, yellow if < 3s, red otherwise)
    var performanceLevel: PerformanceLevel {
        if metadata.latencyMs < 2000 { return .good }
        if metadata.latencyMs < 3000 { return .acceptable }
        return .slow
    }

    enum PerformanceLevel {
        case good, acceptable, slow

        var colorName: String {
            switch self {
            case .good: return "Accent"
            case .acceptable: return "MutedForeground"
            case .slow: return "Destructive"
            }
        }
    }
}

// MARK: - Sample Data

extension CoachResponse {
    /// Sample coach response
    static let sample = CoachResponse(
        id: "response-1",
        text: "I hear that you're feeling stressed about tomorrow's presentation. It sounds like you're caught in some catastrophizingâ€”imagining worst-case scenarios. Let's pause and look at the evidence: What preparation have you already done? What past presentations went well?",
        timestamp: Date(),
        citedEntries: ["sample-1"],
        suggestedAction: "Take 5 minutes to list 3 things you've prepared well for this presentation.",
        nextState: .reframe,
        metadata: CoachResponse.ResponseMetadata(
            tokenCount: 95,
            latencyMs: 1850,
            model: "qwen3-4b-int4",
            loraAdapter: "tone-warm",
            retrievalContext: CoachResponse.ResponseMetadata.RetrievalContext(
                entryCount: 3,
                cardId: "card_reframing"
            )
        )
    )

    /// Sample response with action
    static let sampleWithAction = CoachResponse(
        id: "response-2",
        text: "You mentioned feeling grateful for your friend's support. That's wonderful! Gratitude is a powerful way to build resilience. When we acknowledge the positive, it helps balance out difficult moments.",
        timestamp: Date(),
        citedEntries: ["sample-2"],
        suggestedAction: "Send a quick text to your friend thanking them for being there.",
        nextState: .action,
        metadata: CoachResponse.ResponseMetadata(
            tokenCount: 82,
            latencyMs: 1620,
            model: "qwen3-4b-int4",
            loraAdapter: nil,
            retrievalContext: CoachResponse.ResponseMetadata.RetrievalContext(
                entryCount: 2,
                cardId: nil
            )
        )
    )

    /// Sample initial response (goal setting)
    static let sampleInitial = CoachResponse(
        id: "response-3",
        text: "Welcome back! It's great to see you here. What would you like to focus on in today's reflection?",
        timestamp: Date(),
        citedEntries: [],
        suggestedAction: nil,
        nextState: .goal,
        metadata: CoachResponse.ResponseMetadata(
            tokenCount: 45,
            latencyMs: 980,
            model: "qwen3-4b-int4",
            loraAdapter: "tone-warm",
            retrievalContext: CoachResponse.ResponseMetadata.RetrievalContext(
                entryCount: 0,
                cardId: nil
            )
        )
    )
}
